version: '2.1'

commands:
  maven_package:
    steps:
      - checkout
      - with_cache:
          steps:
            - run:
                command: |-
                  #!/bin/bash
                  
                  set -x
                  # shellcheck disable=SC2086
                  mvn clean package "$@"
                  set +x
                name: Package Contents Using Maven
      - process_test_results

  # Source: https://circleci.com/developer/orbs/orb/circleci/maven
  process_test_results:
    description: |
      Upload test results.
      This will populate the Test Summary tab in the CircleCI UI. By default it will
      look in `target/surefire-reports` (the default location for maven test results).
      You can override where to find the test results with the path parameter.
    parameters:
      test_results_path:
        default: target/surefire-reports
        description: Specify a custom path for maven test results
        type: string
    steps:
      - store_test_results:
          path: << parameters.test_results_path >>
  install_wix:
    steps:
      - run:
          command: |-
            cd ..
            mkdir dotnet
            cd dotnet
            wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
            chmod +x ./dotnet-install.sh
            ./dotnet-install.sh --version latest
            export DOTNET_ROOT=$HOME/.dotnet
            export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools
            dotnet tool install --global wix
          name: Install WiX

  with_cache:
    description: |
      Run a set of steps with Maven dependencies cached.
      
      This command will first restore a cache of maven dependencies, if one was
      saved by a previous build. The provided `steps` parameter will then be executed, and
      if successful, then a fresh cache will be saved, if required.
      
      The contents of the `~/.m2/repository` directory is cached, which will substantially
      improve build times for projects with many dependencies.
      
      The cache-key is generated from any files named `pom.xml` that are
      present in the `working_directory`.
    parameters:
      app_src_directory:
        default: ""
        description: Useful when the source of your maven project is nott in the root directory of your git repo. Supply the name of the directory or relative path of the directory containing your source code.
        type: string
      dependency_plugin_version:
        default: 3.1.2
        description: Specify the Maven Dependency Plugin
        type: string
      maven_command:
        default: mvn
        description: Specify a custom path for invoking maven
        type: string
      settings_file:
        default: ""
        description: Specify a custom settings file to use (optional)
        type: string
      steps:
        type: steps
      verify_dependencies:
        default: true
        description: Verify dependencies are valid and available from public sources
        type: boolean
    steps:
      - run:
          command: |-
            #!/bin/bash
            find . -name 'pom.xml' | sort | xargs cat > /tmp/maven_cache_seed
          name: Generate Cache Checksum
          working_directory: << parameters.app_src_directory >>
      - restore_cache:
          key: maven-{{ checksum "/tmp/maven_cache_seed" }}
      - when:
          condition: << parameters.verify_dependencies >>
          steps:
            - run:
                command: |
                  #!/bin/bash
                  if [ -n "$PARAM_SETTINGS_FILE" ]; then
                      set -- "$@" --settings "$PARAM_SETTINGS_FILE"
                  fi
                  
                  set -x
                  $PARAM_MVN_COMMAND org.apache.maven.plugins:maven-dependency-plugin:"$PARAM_DEP_PLUGIN_VER":go-offline "$@"
                  set +x
                environment:
                  PARAM_DEP_PLUGIN_VER: << parameters.dependency_plugin_version >>
                  PARAM_MVN_COMMAND: << parameters.maven_command >>
                  PARAM_SETTINGS_FILE: << parameters.settings_file >>
                name: Verify dependencies
                working_directory: << parameters.app_src_directory >>
      - steps: << parameters.steps >>
      - save_cache:
          key: maven-{{ checksum "/tmp/maven_cache_seed" }}
          paths:
            - ~/.m2/repository

  create_msi:
    steps:
      - run:
          command: |-
            jpackage --input ./target --dest ./installer --name "Desktop Finance" --main-jar desktop-finance.jar --main-class com.andrewhun.finance.App --type "msi" --verbose
          name: Create MSI
  generate_executable:
    steps:
      - run:
          command: |-
            echo "Checking root folder contents"
            ls
            echo "Checking out folder containing root"
            cd ..
            ls
            echo "Checking out bin folder"
            cd bin
            ls
            cd installer
            mkdir launch4j-temp
            cd launch4j-temp
            wget https://sourceforge.net/projects/launch4j/files/launch4j-3/3.50/launch4j-3.50-linux-x64.tgz
            tar -xf launch4j-3.50-linux-x64.tgz
            cd launch4j
            wget https://builds.openlogic.com/downloadJDK/openlogic-openjdk-jre/21.0.3+9/openlogic-openjdk-jre-21.0.3+9-linux-x64.tar.gz
            tar -xf openlogic-openjdk-jre-21.0.3+9-linux-x64.tar.gz
            mv ./openlogic-openjdk-jre-21.0.3+9-linux-x64 ./jre
            cp ../../../target/desktop-finance-jar-with-dependencies.jar ./
            cp ../../launch4j-config.xml ./
            sed -i -e 's/\r$//' ./launch4j
            ./launch4j launch4j-config.xml
            cd ../..
            cp launch4j-temp/launch4j/desktop-finance-nsis.exe ./
            rm -rf launch4j-temp
            rm desktop-finance-nsis.exe
          name: Generate Executable Using Launch4j
  generate_installer:
    steps:
      - run:
          command: |-
            cd installer
            mkdir nsis-temp
            cd nsis-temp
            wget https://sourceforge.net/projects/nsis/files/NSIS%203/3.03/nsis-3.03-src.tar.bz2
            tar -xf nsis-3.03-src.tar.bz2
            cd nsis-3.03-src
            wget http://prdownloads.sourceforge.net/scons/scons-local-3.0.1.tar.gz
            tar -xf scons-local-3.0.1.tar.gz
            python scons.py NSIS_MAX_STRLEN=8192 NSIS_CONFIG_CONST_DATA_PATH=no SKIPSTUBS=all SKIPPLUGINS=all SKIPUTILS=all SKIPMISC=all install-compiler
            cp ../../desktop-finance-installer-script.nsi ./
            ls
            cd ../..
            rm -rf nsis-temp
            ls
          name: Generate Installer Using NSIS
  git_commit:
    steps:
      - run:
          command: |-
            #!/bin/bash
            git config --global user.email "andrewhun995@gmail.com"
            git config --global user.name "Andras Tyichi"
            git branch -u origin/reset
            git add --all
            git commit -m "Pushing Packaged Content Via CircleCI [skip ci]"
            git push
          name: Commit to Git

jobs:
  package_and_commit:
    docker:
      - image: andrewhun/desktop-finance-cci:nsis
    steps:
      - maven_package
      # - install_wix
      # - create_msi
      - generate_executable
      - generate_installer
      - git_commit


workflows:
  package_and_commit:
    jobs:
      - package_and_commit